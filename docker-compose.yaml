
#  ____   ____ __  __ 
# |  _ \ / ___|  \/  |
# | | | | |   | |\/| |
# | |_| | |___| |  | |
# |____/ \____|_|  |_|
#
# This compose file was generated by Docker Compose Selector: https://github.com/ajnart/docker-compose-selector 
services:

  # Sonarr: Smart PVR for usenet and bittorrent users. Monitors multiple RSS feeds for new TV show episodes, automatically grabbing, sorting, and renaming them.
  sonarr:
    image: ghcr.io/hotio/sonarr:latest
    container_name: ${CONTAINER_PREFIX}sonarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - ${CONFIG_PATH}/sonarr:/config
      - ${DATA_PATH}/tv:/data/tv
      - ${DATA_PATH}/downloads:/data/downloads
    ports:
      - 8989:8989
    restart: ${RESTART_POLICY}

  # Radarr: A fork of Sonarr to work with movies. Automatically monitors and downloads movies, handles quality upgrades, and manages your movie collection with an elegant web interface.
  radarr:
    image: ghcr.io/hotio/radarr:latest
    container_name: ${CONTAINER_PREFIX}radarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - ${CONFIG_PATH}/radarr:/config
      - ${DATA_PATH}/movies:/data/movies
      - ${DATA_PATH}/downloads:/data/downloads
    ports:
      - 7878:7878
    restart: ${RESTART_POLICY}

  # Lidarr: A music collection manager for Usenet and BitTorrent users. Monitors multiple RSS feeds for new tracks from your favorite artists, automatically grabbing, sorting, and renaming them.
  lidarr:
    image: ghcr.io/hotio/lidarr:latest
    container_name: ${CONTAINER_PREFIX}lidarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - ${CONFIG_PATH}/lidarr:/config
      - ${DATA_PATH}/music:/data/music
      - ${DATA_PATH}/downloads:/data/downloads
    ports:
      - 8686:8686
    restart: ${RESTART_POLICY}

  # Readarr: A book, magazine, comics eBook and audiobook collection manager. Automatically monitors and downloads your favorite literature, handles quality upgrades, and manages your digital library.
  readarr:
    image: ghcr.io/hotio/readarr:latest
    container_name: ${CONTAINER_PREFIX}readarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - ${CONFIG_PATH}/readarr:/config
      - ${DATA_PATH}/books:/data/books
      - ${DATA_PATH}/downloads:/data/downloads
    ports:
      - 8787:8787
    restart: ${RESTART_POLICY}

  # Prowlarr: A powerful indexer manager/proxy built on the arr stack. Seamlessly integrates with Sonarr, Radarr, Lidarr, and Readarr, supporting both Torrent Trackers and Usenet Indexers with centralized management.
  prowlarr:
    image: ghcr.io/hotio/prowlarr:latest
    container_name: ${CONTAINER_PREFIX}prowlarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - ${CONFIG_PATH}/prowlarr:/config
    ports:
      - 9696:9696
    restart: ${RESTART_POLICY}

  # NZBGet: Efficient usenet downloader, optimized for reliability, completeness, and speed.
  nzbget:
    image: ghcr.io/hotio/nzbget:latest
    container_name: ${CONTAINER_PREFIX}nzbget
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - ${CONFIG_PATH}/nzbget:/config
      - ${DATA_PATH}/downloads:/data/downloads
    ports:
      - 6789:6789
    restart: ${RESTART_POLICY}

  # Bazarr: Companion application to Sonarr and Radarr that manages and downloads subtitles.
  bazarr:
    image: ghcr.io/hotio/bazarr:latest
    container_name: ${CONTAINER_PREFIX}bazarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - ${CONFIG_PATH}/bazarr:/config
      - ${DATA_PATH}/media:/data/media
    ports:
      - 6767:6767
    restart: ${RESTART_POLICY}

  # Jackett: API Support for your favorite torrent trackers, translating searches into tracker-site-specific queries.
  jackett:
    image: ghcr.io/hotio/jackett:latest
    container_name: ${CONTAINER_PREFIX}jackett
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - ${CONFIG_PATH}/jackett:/config
      - ${DATA_PATH}/downloads:/data/downloads
    ports:
      - 9117:9117
    restart: ${RESTART_POLICY}

  # qBittorrent: A cross-platform BitTorrent client with an integrated web interface.
  qbittorrent:
    image: ghcr.io/hotio/qbittorrent:latest
    container_name: ${CONTAINER_PREFIX}qbittorrent
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
      - WEBUI_PORT=8080
    volumes:
      - ${CONFIG_PATH}/qbittorrent:/config
      - ${DATA_PATH}/downloads:/data/downloads
    ports:
      - 8080:8080
      - 6881:6881
      - 6881:6881/udp
    restart: ${RESTART_POLICY}

  # Autoscan: Autoscan replaces the default Plex and Emby behavior for picking up file changes on the file system.
  autoscan:
    image: ghcr.io/hotio/autoscan:latest
    container_name: ${CONTAINER_PREFIX}autoscan
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - ${CONFIG_PATH}/autoscan:/config
      - ${DATA_PATH}/media:/data/media
    ports:
      - 3030:3030
    restart: ${RESTART_POLICY}

  # Doplarr: An app that automatically sends requests to Sonarr/Radarr based on discord messages.
  doplarr:
    image: ghcr.io/hotio/doplarr:latest
    container_name: ${CONTAINER_PREFIX}doplarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
      - DISCORD_TOKEN=
      - DISCORD_SERVER_ID=
      - SONARR_URL=http://sonarr:8989
      - SONARR_API_KEY=
      - RADARR_URL=http://radarr:7878
      - RADARR_API_KEY=
    volumes:
      - ${CONFIG_PATH}/doplarr:/config
    restart: ${RESTART_POLICY}

  # NZBHydra 2: NZBHydra 2 is a meta search for newznab indexers and torznab trackers.
  nzbhydra2:
    image: ghcr.io/hotio/nzbhydra2:latest
    container_name: ${CONTAINER_PREFIX}nzbhydra2
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - ${CONFIG_PATH}/nzbhydra2:/config
      - ${DATA_PATH}/downloads:/data/downloads
    ports:
      - 5076:5076
    restart: ${RESTART_POLICY}

  # qBitManage: A tool to manage qBittorrent and automate cross-seeding.
  qbitmanage:
    image: ghcr.io/hotio/qbitmanage:latest
    container_name: ${CONTAINER_PREFIX}qbitmanage
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - ${CONFIG_PATH}/qbitmanage:/config
      - ${DATA_PATH}/downloads:/data/downloads
    restart: ${RESTART_POLICY}

  # Requestrr: Requestrr is a chatbot used to simplify using services like Sonarr/Radarr/Overseerr via integrations like Discord.
  requestrr:
    image: ghcr.io/hotio/requestrr:latest
    container_name: ${CONTAINER_PREFIX}requestrr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - ${CONFIG_PATH}/requestrr:/config
    ports:
      - 4545:4545
    restart: ${RESTART_POLICY}

  # rFlood: A custom version of Flood with additional ruTorrent-like functionality.
  rflood:
    image: ghcr.io/hotio/rflood:latest
    container_name: ${CONTAINER_PREFIX}rflood
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - ${CONFIG_PATH}/rflood:/config
      - ${DATA_PATH}/downloads:/data/downloads
    ports:
      - 3000:3000
      - 50000:50000
    restart: ${RESTART_POLICY}

  # SABnzbd: Free and easy binary newsreader with web interface. Makes downloading from Usenet easy.
  sabnzbd:
    image: ghcr.io/hotio/sabnzbd:latest
    container_name: ${CONTAINER_PREFIX}sabnzbd
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - ${CONFIG_PATH}/sabnzbd:/config
      - ${DATA_PATH}/downloads:/data/downloads
    ports:
      - 8080:8080
    restart: ${RESTART_POLICY}

  # Unpackerr: Extracts archives for various media server software like Sonarr, Radarr, Lidarr, etc.
  unpackerr:
    image: ghcr.io/hotio/unpackerr:latest
    container_name: ${CONTAINER_PREFIX}unpackerr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - ${CONFIG_PATH}/unpackerr:/config
      - ${DATA_PATH}/downloads:/data/downloads
    restart: ${RESTART_POLICY}

  # Whisparr: An adult movie collection manager for Usenet and BitTorrent users.
  whisparr:
    image: ghcr.io/hotio/whisparr:latest
    container_name: ${CONTAINER_PREFIX}whisparr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - ${CONFIG_PATH}/whisparr:/config
      - ${DATA_PATH}/adult:/data/adult
      - ${DATA_PATH}/downloads:/data/downloads
    ports:
      - 6969:6969
    restart: ${RESTART_POLICY}

  # Jellyfin: A free software media system that puts you in control of managing and streaming your media. It is an alternative to the proprietary Emby and Plex, with no premium features behind a paywall.
  jellyfin:
    image: ghcr.io/hotio/jellyfin:latest
    container_name: ${CONTAINER_PREFIX}jellyfin
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - ${CONFIG_PATH}/jellyfin:/config
      - ${DATA_PATH}/media:/data
    ports:
      - 8096:8096
    restart: ${RESTART_POLICY}

  # Plex: A powerful media server that organizes video, music, and photos from personal libraries and streams them to smart TVs, streaming boxes, and mobile devices. Features a polished interface and advanced features for media management.
  plex:
    image: ghcr.io/hotio/plex:latest
    container_name: ${CONTAINER_PREFIX}plex
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
      - PLEX_CLAIM_TOKEN=
      - PLEX_ADVERTISE_URL=
      - PLEX_NO_AUTH_NETWORKS=
    volumes:
      - ${CONFIG_PATH}/plex:/config
      - ${DATA_PATH}/transcode:/transcode
      - ${DATA_PATH}/media:/data
    ports:
      - 32400:32400
    restart: ${RESTART_POLICY}

  # Emby: A powerful media server that organizes and streams your video, music, live TV, and photos from personal media libraries to smart TVs, streaming boxes, and mobile devices. Features a standalone server with comprehensive media management capabilities.
  emby:
    image: lscr.io/linuxserver/emby:latest
    container_name: ${CONTAINER_PREFIX}emby
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${CONFIG_PATH}/emby:/config
      - ${DATA_PATH}/tv:/data/tvshows
      - ${DATA_PATH}/movies:/data/movies
    ports:
      - 8096:8096
      - 8920:8920 #optional
    devices:
      - /dev/dri:/dev/dri #optional
    restart: ${RESTART_POLICY}

  # Tautulli: A monitoring application for Plex Media Server that provides statistics and analytics for your media library.
  tautulli:
    image: ghcr.io/hotio/tautulli:latest
    container_name: ${CONTAINER_PREFIX}tautulli
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - ${CONFIG_PATH}/tautulli:/config
    ports:
      - 8181:8181
    restart: ${RESTART_POLICY}

  # Jellyseerr: A request management and media discovery tool for Jellyfin. Fork of Overseerr with native Jellyfin support.
  jellyseerr:
    image: ghcr.io/hotio/jellyseerr:latest
    container_name: ${CONTAINER_PREFIX}jellyseerr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - ${CONFIG_PATH}/jellyseerr:/config
    ports:
      - 5055:5055
    restart: ${RESTART_POLICY}

  # Overseerr: A request management and media discovery tool for Plex. Integrates with Sonarr and Radarr.
  overseerr:
    image: ghcr.io/hotio/overseerr:latest
    container_name: ${CONTAINER_PREFIX}overseerr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - ${CONFIG_PATH}/overseerr:/config
    ports:
      - 5055:5055
    restart: ${RESTART_POLICY}

  # Stash: An organizer for your adult media. Collects and organizes your adult media collection.
  stash:
    image: ghcr.io/hotio/stash:latest
    container_name: ${CONTAINER_PREFIX}stash
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - ${CONFIG_PATH}/stash:/config
      - ${DATA_PATH}/adult:/data/adult
    ports:
      - 9999:9999
    restart: ${RESTART_POLICY}

  # Portainer: A powerful container management interface that provides a user-friendly web UI for managing Docker environments. Features include container deployment, stack management with Docker Compose support, volume management, network configuration, and real-time container monitoring.
  portainer:
    image: portainer/portainer-ce:latest
    container_name: ${CONTAINER_PREFIX}portainer
    ports:
      - "9443:9443"
      - "8000:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DATA_PATH}/portainer:/data
    environment:
      - TZ=${TZ}
    restart: ${RESTART_POLICY}

  # Traefik: A modern, cloud-native application proxy and load balancer that makes deploying microservices easy. Features automatic service discovery, Let's Encrypt support, and dynamic configuration.
  traefik:
    image: traefik:v3.3
    container_name: ${CONTAINER_PREFIX}traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${CONFIG_PATH}/traefik:/etc/traefik
    environment:
      - TZ=${TZ}
    restart: ${RESTART_POLICY}

  # Nginx: A powerful, high-performance web server and reverse proxy server. Features include load balancing, HTTP caching, serving static files, SSL/TLS termination, and acting as a reverse proxy for other services.
  nginx:
    image: nginx:1-alpine
    container_name: ${CONTAINER_PREFIX}nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ${CONFIG_PATH}/nginx/html:/usr/share/nginx/html
      - ${CONFIG_PATH}/nginx/conf.d:/etc/nginx/conf.d
      - ${CONFIG_PATH}/nginx/ssl:/etc/nginx/ssl
    environment:
      - TZ=${TZ}
    restart: ${RESTART_POLICY}

  # Pi-hole: Network-wide Ad Blocking.
  pihole:
    container_name: ${CONTAINER_PREFIX}pihole
    image: pihole/pihole:latest
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "80:80/tcp"
      - "443:443/tcp"
    environment:
      - TZ=${TZ}
      - FTLCONF_dns_listeningMode=all
    volumes:
      - ${CONFIG_PATH}/pihole:/etc/pihole
    cap_add:
      - NET_ADMIN
    restart: ${RESTART_POLICY}

  # AdGuard Home: Network-wide ads & trackers blocking DNS server.
  adguardhome:
    container_name: ${CONTAINER_PREFIX}adguardhome
    image: adguard/adguardhome:latest
    ports:
      - "53:53/udp"
      - "53:53/tcp"
      - "80:80/tcp"
      - "443:443/tcp"
      - "3000:3000/tcp"
    volumes:
      - ${CONFIG_PATH}/adguardhome/conf:/opt/adguardhome/conf
      - ${CONFIG_PATH}/adguardhome/work:/opt/adguardhome/work
    environment:
      - TZ=${TZ}
    restart: ${RESTART_POLICY}

  # Caddy: Powerful, enterprise-ready, open source web server with automatic HTTPS.
  caddy:
    image: ghcr.io/hotio/caddy:latest
    container_name: ${CONTAINER_PREFIX}caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ${CONFIG_PATH}/caddy:/config
      - ${CONFIG_PATH}/caddy/Caddyfile:/config/Caddyfile
      - ${CONFIG_PATH}/caddy/www:/config/www
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    restart: ${RESTART_POLICY}

  # CloudflareDDNS: Cloudflare DDNS updater written in bash.
  cloudflareddns:
    image: ghcr.io/hotio/cloudflareddns:latest
    container_name: ${CONTAINER_PREFIX}cloudflareddns
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
      - CF_API_TOKEN=
      - CF_ZONES=
      - CF_RECORDS=
      - CF_PROXIED=no
      - DETECTION_MODE=dig-whoami.cloudflare
      - IPV4=yes
      - IPV6=no
    restart: ${RESTART_POLICY}

  # MariaDB: One of the most popular database servers.
  mariadb:
    image: mariadb:latest
    container_name: ${CONTAINER_PREFIX}mariadb
    ports:
      - "3306:3306"
    volumes:
      - ${DATA_PATH}/mariadb:/var/lib/mysql
      - ${CONFIG_PATH}/mariadb:/etc/mysql/conf.d
    environment:
      - MYSQL_ROOT_PASSWORD=your_root_password
      - MYSQL_DATABASE=default_database
      - MYSQL_USER=default_user
      - MYSQL_PASSWORD=your_password
      - TZ=${TZ}
    restart: ${RESTART_POLICY}

  # MySQL: The world's most popular open source database. Features high performance, reliability, and ease of use.
  mysql:
    image: mysql:8.0
    container_name: ${CONTAINER_PREFIX}mysql
    cap_add:
      - SYS_NICE
    ports:
      - "3306:3306"
    volumes:
      - ${DATA_PATH}/mysql:/var/lib/mysql
      - ${CONFIG_PATH}/mysql/conf.d:/etc/mysql/conf.d
      - ${CONFIG_PATH}/mysql/init:/docker-entrypoint-initdb.d
    environment:
      - MYSQL_ROOT_PASSWORD=your_root_password
      - MYSQL_DATABASE=your_database
      - MYSQL_USER=your_user
      - MYSQL_PASSWORD=your_password
      - TZ=${TZ}
    restart: ${RESTART_POLICY}

  # PostgreSQL: The world's most advanced open source database.
  postgres:
    image: postgres:latest
    container_name: ${CONTAINER_PREFIX}postgres
    ports:
      - "5432:5432"
    volumes:
      - ${DATA_PATH}/postgres:/var/lib/postgresql/data
      - ${CONFIG_PATH}/postgres:/etc/postgresql/conf.d
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=your_password
      - POSTGRES_DB=postgres
      - TZ=${TZ}
    shm_size: 128mb
    restart: ${RESTART_POLICY}

  # MongoDB: A document-oriented NoSQL database that provides high performance, high availability, and easy scalability.
  mongodb:
    image: mongo:latest
    container_name: ${CONTAINER_PREFIX}mongodb
    ports:
      - "27017:27017"
    volumes:
      - ${DATA_PATH}/mongodb:/data/db
      - ${CONFIG_PATH}/mongodb:/etc/mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=your_password
      - MONGO_INITDB_DATABASE=admin
      - TZ=${TZ}
    restart: ${RESTART_POLICY}

  # Redis: An open-source, in-memory data structure store used as a database, cache, message broker, and queue.
  redis:
    image: redis:alpine
    container_name: ${CONTAINER_PREFIX}redis
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass your_password
    volumes:
      - ${DATA_PATH}/redis:/data
      - ${CONFIG_PATH}/redis:/usr/local/etc/redis
    environment:
      - TZ=${TZ}
    restart: ${RESTART_POLICY}

  # Grafana: The open and composable observability and data visualization platform. Visualize metrics, logs, and traces from multiple sources.
  grafana:
    image: grafana/grafana-enterprise
    container_name: ${CONTAINER_PREFIX}grafana
    ports:
      - "3000:3000"
    volumes:
      - ${DATA_PATH}/grafana:/var/lib/grafana
      - ${CONFIG_PATH}/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=your_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - TZ=${TZ}
    restart: ${RESTART_POLICY}

  # Prometheus: A powerful monitoring and alerting toolkit designed for reliability. Features include a multi-dimensional data model, flexible query language (PromQL), efficient time series database, and modern alerting approach.
  prometheus:
    image: prom/prometheus:latest
    container_name: ${CONTAINER_PREFIX}prometheus
    volumes:
      - ${CONFIG_PATH}/prometheus:/etc/prometheus
      - ${DATA_PATH}/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    environment:
      - TZ=${TZ}
    restart: ${RESTART_POLICY}

  # Home Assistant: Open source home automation that puts local control and privacy first.
  homeassistant:
    image: homeassistant/home-assistant:latest
    container_name: ${CONTAINER_PREFIX}homeassistant
    ports:
      - "8123:8123"
    volumes:
      - ${CONFIG_PATH}/homeassistant:/config
    environment:
      - TZ=${TZ}
    restart: ${RESTART_POLICY}

  # Watchtower: An automated solution for keeping Docker containers up to date. Monitors running containers and automatically pulls and redeploys containers when it detects that a relevant image has been updated.
  watchtower:
    image: containrrr/watchtower
    container_name: ${CONTAINER_PREFIX}watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $HOME/.docker/config.json:/config.json
    environment:
      - TZ=${TZ}
      - WATCHTOWER_SCHEDULE=0 0 4 * * * # Update at 4 AM daily
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_STOPPED=false
    restart: ${RESTART_POLICY}

  # Homarr: A modern, feature-rich dashboard for your server. Integrates with Docker for container management, supports multiple users with advanced permissions, and provides a sleek interface for managing your self-hosted services.
  homarr:
    container_name: ${CONTAINER_PREFIX}homarr
    image: ghcr.io/homarr-labs/homarr:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${CONFIG_PATH}/homarr:/appdata
    environment:
      - TZ=${TZ}
      - SECRET_ENCRYPTION_KEY=your_64_character_hex_string
    ports:
      - '7575:7575'
    restart: ${RESTART_POLICY}

  # Heimdall: A modern, elegant application dashboard and launcher that helps you organize all your web applications. Features a clean interface, customizable categories, and support for various authentication methods.
  heimdall:
    image: lscr.io/linuxserver/heimdall:latest
    container_name: ${CONTAINER_PREFIX}heimdall
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${CONFIG_PATH}/heimdall:/config
    ports:
      - "80:80"
      - "443:443"
    restart: ${RESTART_POLICY}

  # Nextcloud: A safe home for all your data.
  nextcloud:
    image: nextcloud:latest
    container_name: ${CONTAINER_PREFIX}nextcloud
    ports:
      - "8080:80"
    volumes:
      - ${CONFIG_PATH}/nextcloud/html:/var/www/html
      - ${CONFIG_PATH}/nextcloud/apps:/var/www/html/custom_apps
      - ${CONFIG_PATH}/nextcloud/config:/var/www/html/config
      - ${DATA_PATH}/nextcloud:/var/www/html/data
    environment:
      - MYSQL_HOST=nextclouddb
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_PASSWORD=nextcloud_db_password
      - NEXTCLOUD_ADMIN_USER=admin
      - NEXTCLOUD_ADMIN_PASSWORD=admin_password
      - NEXTCLOUD_TRUSTED_DOMAINS=localhost
      - TZ=${TZ}
    restart: ${RESTART_POLICY}
  
  nextclouddb:
    image: mariadb:latest
    container_name: ${CONTAINER_PREFIX}nextcloud-db
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    volumes:
      - ${DATA_PATH}/nextcloud-db:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_PASSWORD=nextcloud_db_password
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - TZ=${TZ}
    restart: ${RESTART_POLICY}

  # Vaultwarden: Unofficial Bitwarden compatible server written in Rust.
  vaultwarden:
    image: vaultwarden/server:latest
    container_name: ${CONTAINER_PREFIX}vaultwarden
    ports:
      - "8080:8080"
    volumes:
      - ${DATA_PATH}/vaultwarden:/data
    environment:
      - WEBSOCKET_ENABLED=true
      - WEBSOCKET_PORT=8080
      - TZ=${TZ}
    restart: ${RESTART_POLICY}

  # Gitea: A painless self-hosted Git service.
  gitea:
    image: gitea/gitea:latest
    container_name: ${CONTAINER_PREFIX}gitea
    ports:
      - "3000:3000"
    volumes:
      - ${DATA_PATH}/gitea:/data
    environment:
      - MYSQL_HOST=giteadb
      - MYSQL_DATABASE=gitea
      - MYSQL_USER=gitea
      - MYSQL_PASSWORD=gitea_db_password
      - TZ=${TZ}
    command: --custom-path /data/custom --app-url http://localhost:3000
    restart: ${RESTART_POLICY}

  # Code Server: Run VS Code on any machine anywhere and access it in the browser.
  code-server:
    image: codercom/code-server:latest
    container_name: ${CONTAINER_PREFIX}code-server
    ports:
      - "8080:8080"
    volumes:
      - ${CONFIG_PATH}/code-server:/config
    environment:
      - PASSWORD=your_password
      - TZ=${TZ}
    command: code-server --bind-addr 0.0.0.0:8080 --auth password --disable-telemetry
    restart: ${RESTART_POLICY}

  # Elasticsearch: A distributed, RESTful search and analytics engine capable of addressing a growing number of use cases.
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    container_name: ${CONTAINER_PREFIX}elasticsearch
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - TZ=${TZ}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ${DATA_PATH}/elasticsearch:/usr/share/elasticsearch/data
      - ${CONFIG_PATH}/elasticsearch:/usr/share/elasticsearch/config
    ports:
      - "9200:9200"
      - "9300:9300"
    restart: ${RESTART_POLICY}

  # Duplicacy: A lock-free deduplication cloud backup tool.
  duplicacy:
    image: ghcr.io/hotio/duplicacy:latest
    container_name: ${CONTAINER_PREFIX}duplicacy
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - ${CONFIG_PATH}/duplicacy:/config
      - ${DATA_PATH}/backups:/data/backups
    ports:
      - 3875:3875
    restart: ${RESTART_POLICY}

  # MergerFS: A featureful FUSE-based union filesystem.
  mergerfs:
    image: ghcr.io/hotio/mergerfs:latest
    container_name: ${CONTAINER_PREFIX}mergerfs
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
      - DISK_PATH=/disk
      - DISK_MOUNTPOINTS=/disk1,/disk2,/disk3
      - MOUNT_OPTS=defaults,allow_other,direct_io,use_ino,category.create=mfs
    volumes:
      - ${DATA_PATH}/disk1:/disk1
      - ${DATA_PATH}/disk2:/disk2
      - ${DATA_PATH}/disk3:/disk3
    privileged: true
    restart: ${RESTART_POLICY}
